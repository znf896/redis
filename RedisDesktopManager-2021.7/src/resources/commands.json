[{"cmd": "APPEND", "summary": "Append a value to a key", "arguments": "key value", "since": "2.0.0"}, {"cmd": "AUTH", "summary": "Authenticate to the server", "arguments": "password", "since": "1.0.0"}, {"cmd": "BGREWRITEAOF", "summary": "Asynchronously rewrite the append-only file", "arguments": "", "since": "1.0.0"}, {"cmd": "BGSAVE", "summary": "Asynchronously save the dataset to disk", "arguments": "", "since": "1.0.0"}, {"cmd": "BITCOUNT", "summary": "Count set bits in a string", "arguments": "key [start end]", "since": "2.6.0"}, {"cmd": "BITFIELD", "summary": "Perform arbitrary bitfield integer operations on strings", "arguments": "key [GET] [SET] [INCRBY] [OVERFLOW]", "since": "3.2.0"}, {"cmd": "BITOP", "summary": "Perform bitwise operations between strings", "arguments": "operation destkey key", "since": "2.6.0"}, {"cmd": "BITPOS", "summary": "Find first bit set or clear in a string", "arguments": "key bit [start] [end]", "since": "2.8.7"}, {"cmd": "BLPOP", "summary": "Remove and get the first element in a list, or block until one is available", "arguments": "key timeout", "since": "2.0.0"}, {"cmd": "BRPOP", "summary": "Remove and get the last element in a list, or block until one is available", "arguments": "key timeout", "since": "2.0.0"}, {"cmd": "BRPOPLPUSH", "summary": "Pop a value from a list, push it to another list and return it; or block until one is available", "arguments": "source destination timeout", "since": "2.2.0"}, {"cmd": "BZPOPMIN", "summary": "Remove and return the member with the lowest score from one or more sorted sets, or block until one is available", "arguments": "key timeout", "since": "5.0.0"}, {"cmd": "BZPOPMAX", "summary": "Remove and return the member with the highest score from one or more sorted sets, or block until one is available", "arguments": "key timeout", "since": "5.0.0"}, {"cmd": "CLIENT KILL", "summary": "Kill the connection of a client", "arguments": "[ip:port] [ID] [TYPE] [ADDR] [SKIPME]", "since": "2.4.0"}, {"cmd": "CLIENT LIST", "summary": "Get the list of client connections", "arguments": "", "since": "2.4.0"}, {"cmd": "CLIENT GETNAME", "summary": "Get the current connection name", "arguments": "", "since": "2.6.9"}, {"cmd": "CLIENT PAUSE", "summary": "Stop processing commands from clients for some time", "arguments": "timeout", "since": "2.9.50"}, {"cmd": "CLIENT REPLY", "summary": "Instruct the server whether to reply to commands", "arguments": "reply-mode", "since": "3.2"}, {"cmd": "CLIENT SETNAME", "summary": "Set the current connection name", "arguments": "connection-name", "since": "2.6.9"}, {"cmd": "CLUSTER ADDSLOTS", "summary": "Assign new hash slots to receiving node", "arguments": "slot", "since": "3.0.0"}, {"cmd": "CLUSTER COUNT-FAILURE-REPORTS", "summary": "Return the number of failure reports active for a given node", "arguments": "node-id", "since": "3.0.0"}, {"cmd": "CLUSTER COUNTKEYSINSLOT", "summary": "Return the number of local keys in the specified hash slot", "arguments": "slot", "since": "3.0.0"}, {"cmd": "CLUSTER DELSLOTS", "summary": "Set hash slots as unbound in receiving node", "arguments": "slot", "since": "3.0.0"}, {"cmd": "CLUSTER FAILOVER", "summary": "Forces a slave to perform a manual failover of its master.", "arguments": "[options]", "since": "3.0.0"}, {"cmd": "CLUSTER FORGET", "summary": "Remove a node from the nodes table", "arguments": "node-id", "since": "3.0.0"}, {"cmd": "CLUSTER GETKEYSINSLOT", "summary": "Return local key names in the specified hash slot", "arguments": "slot count", "since": "3.0.0"}, {"cmd": "CLUSTER INFO", "summary": "Provides info about Redis Cluster node state", "arguments": "", "since": "3.0.0"}, {"cmd": "CLUSTER KEYSLOT", "summary": "Returns the hash slot of the specified key", "arguments": "key", "since": "3.0.0"}, {"cmd": "CLUSTER MEET", "summary": "Force a node cluster to handshake with another node", "arguments": "ip port", "since": "3.0.0"}, {"cmd": "CLUSTER NODES", "summary": "Get Cluster config for the node", "arguments": "", "since": "3.0.0"}, {"cmd": "CLUSTER REPLICATE", "summary": "Reconfigure a node as a slave of the specified master node", "arguments": "node-id", "since": "3.0.0"}, {"cmd": "CLUSTER RESET", "summary": "Reset a Redis Cluster node", "arguments": "[reset-type]", "since": "3.0.0"}, {"cmd": "CLUSTER SAVECONFIG", "summary": "Forces the node to save cluster state on disk", "arguments": "", "since": "3.0.0"}, {"cmd": "CLUSTER SET-CONFIG-EPOCH", "summary": "Set the configuration epoch in a new node", "arguments": "config-epoch", "since": "3.0.0"}, {"cmd": "CLUSTER SETSLOT", "summary": "Bind a hash slot to a specific node", "arguments": "slot subcommand [node-id]", "since": "3.0.0"}, {"cmd": "CLUSTER SLAVES", "summary": "List slave nodes of the specified master node", "arguments": "node-id", "since": "3.0.0"}, {"cmd": "CLUSTER SLOTS", "summary": "Get array of Cluster slot to node mappings", "arguments": "", "since": "3.0.0"}, {"cmd": "COMMAND", "summary": "Get array of Redis command details", "arguments": "", "since": "2.8.13"}, {"cmd": "COMMAND COUNT", "summary": "Get total number of Redis commands", "arguments": "", "since": "2.8.13"}, {"cmd": "COMMAND GETKEYS", "summary": "Extract keys given a full Redis command", "arguments": "", "since": "2.8.13"}, {"cmd": "COMMAND INFO", "summary": "Get array of specific Redis command details", "arguments": "command-name", "since": "2.8.13"}, {"cmd": "CONFIG GET", "summary": "Get the value of a configuration parameter", "arguments": "parameter", "since": "2.0.0"}, {"cmd": "CONFIG REWRITE", "summary": "Rewrite the configuration file with the in memory configuration", "arguments": "", "since": "2.8.0"}, {"cmd": "CONFIG SET", "summary": "Set a configuration parameter to the given value", "arguments": "parameter value", "since": "2.0.0"}, {"cmd": "CONFIG RESETSTAT", "summary": "Reset the stats returned by INFO", "arguments": "", "since": "2.0.0"}, {"cmd": "DBSIZE", "summary": "Return the number of keys in the selected database", "arguments": "", "since": "1.0.0"}, {"cmd": "DEBUG OBJECT", "summary": "Get debugging information about a key", "arguments": "key", "since": "1.0.0"}, {"cmd": "DEBUG SEGFAULT", "summary": "Make the server crash", "arguments": "", "since": "1.0.0"}, {"cmd": "DECR", "summary": "Decrement the integer value of a key by one", "arguments": "key", "since": "1.0.0"}, {"cmd": "DECRBY", "summary": "Decrement the integer value of a key by the given number", "arguments": "key decrement", "since": "1.0.0"}, {"cmd": "DEL", "summary": "Delete a key", "arguments": "key", "since": "1.0.0"}, {"cmd": "DISCARD", "summary": "Discard all commands issued after MULTI", "arguments": "", "since": "2.0.0"}, {"cmd": "DUMP", "summary": "Return a serialized version of the value stored at the specified key.", "arguments": "key", "since": "2.6.0"}, {"cmd": "ECHO", "summary": "Echo the given string", "arguments": "message", "since": "1.0.0"}, {"cmd": "EVAL", "summary": "Execute a Lua script server side", "arguments": "script numkeys key arg", "since": "2.6.0"}, {"cmd": "EVALSHA", "summary": "Execute a Lua script server side", "arguments": "sha1 numkeys key arg", "since": "2.6.0"}, {"cmd": "EXEC", "summary": "Execute all commands issued after MULTI", "arguments": "", "since": "1.2.0"}, {"cmd": "EXISTS", "summary": "Determine if a key exists", "arguments": "key", "since": "1.0.0"}, {"cmd": "EXPIRE", "summary": "Set a key's time to live in seconds", "arguments": "key seconds", "since": "1.0.0"}, {"cmd": "EXPIREAT", "summary": "Set the expiration for a key as a UNIX timestamp", "arguments": "key timestamp", "since": "1.2.0"}, {"cmd": "FLUSHALL", "summary": "Remove all keys from all databases", "arguments": "[async]", "since": "1.0.0"}, {"cmd": "FLUSHDB", "summary": "Remove all keys from the current database", "arguments": "[async]", "since": "1.0.0"}, {"cmd": "GEOADD", "summary": "Add one or more geospatial items in the geospatial index represented using a sorted set", "arguments": "key longitude latitude member", "since": "3.2.0"}, {"cmd": "GEOHASH", "summary": "Returns members of a geospatial index as standard geohash strings", "arguments": "key member", "since": "3.2.0"}, {"cmd": "GEOPOS", "summary": "Returns longitude and latitude of members of a geospatial index", "arguments": "key member", "since": "3.2.0"}, {"cmd": "GEODIST", "summary": "Returns the distance between two members of a geospatial index", "arguments": "key member1 member2 [unit]", "since": "3.2.0"}, {"cmd": "GEORADIUS", "summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point", "arguments": "key longitude latitude radius unit [withcoord] [withdist] [withhash] [COUNT] [order] [STORE] [STOREDIST]", "since": "3.2.0"}, {"cmd": "GEORADIUSBYMEMBER", "summary": "Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member", "arguments": "key member radius unit [withcoord] [withdist] [withhash] [COUNT] [order] [STORE] [STOREDIST]", "since": "3.2.0"}, {"cmd": "GET", "summary": "Get the value of a key", "arguments": "key", "since": "1.0.0"}, {"cmd": "GETBIT", "summary": "Returns the bit value at offset in the string value stored at key", "arguments": "key offset", "since": "2.2.0"}, {"cmd": "GETRANGE", "summary": "Get a substring of the string stored at a key", "arguments": "key start end", "since": "2.4.0"}, {"cmd": "GETSET", "summary": "Set the string value of a key and return its old value", "arguments": "key value", "since": "1.0.0"}, {"cmd": "HDEL", "summary": "Delete one or more hash fields", "arguments": "key field", "since": "2.0.0"}, {"cmd": "HEXISTS", "summary": "Determine if a hash field exists", "arguments": "key field", "since": "2.0.0"}, {"cmd": "HGET", "summary": "Get the value of a hash field", "arguments": "key field", "since": "2.0.0"}, {"cmd": "HGETALL", "summary": "Get all the fields and values in a hash", "arguments": "key", "since": "2.0.0"}, {"cmd": "HINCRBY", "summary": "Increment the integer value of a hash field by the given number", "arguments": "key field increment", "since": "2.0.0"}, {"cmd": "HINCRBYFLOAT", "summary": "Increment the float value of a hash field by the given amount", "arguments": "key field increment", "since": "2.6.0"}, {"cmd": "HKEYS", "summary": "Get all the fields in a hash", "arguments": "key", "since": "2.0.0"}, {"cmd": "HLEN", "summary": "Get the number of fields in a hash", "arguments": "key", "since": "2.0.0"}, {"cmd": "HMGET", "summary": "Get the values of all the given hash fields", "arguments": "key field", "since": "2.0.0"}, {"cmd": "HMSET", "summary": "Set multiple hash fields to multiple values", "arguments": "key field value", "since": "2.0.0"}, {"cmd": "HSET", "summary": "Set the string value of a hash field", "arguments": "key field value", "since": "2.0.0"}, {"cmd": "HSETNX", "summary": "Set the value of a hash field, only if the field does not exist", "arguments": "key field value", "since": "2.0.0"}, {"cmd": "HSTRLEN", "summary": "Get the length of the value of a hash field", "arguments": "key field", "since": "3.2.0"}, {"cmd": "HVALS", "summary": "Get all the values in a hash", "arguments": "key", "since": "2.0.0"}, {"cmd": "INCR", "summary": "Increment the integer value of a key by one", "arguments": "key", "since": "1.0.0"}, {"cmd": "INCRBY", "summary": "Increment the integer value of a key by the given amount", "arguments": "key increment", "since": "1.0.0"}, {"cmd": "INCRBYFLOAT", "summary": "Increment the float value of a key by the given amount", "arguments": "key increment", "since": "2.6.0"}, {"cmd": "INFO", "summary": "Get information and statistics about the server", "arguments": "[section]", "since": "1.0.0"}, {"cmd": "KEYS", "summary": "Find all keys matching the given pattern", "arguments": "pattern", "since": "1.0.0"}, {"cmd": "LASTSAVE", "summary": "Get the UNIX time stamp of the last successful save to disk", "arguments": "", "since": "1.0.0"}, {"cmd": "LINDEX", "summary": "Get an element from a list by its index", "arguments": "key index", "since": "1.0.0"}, {"cmd": "LINSERT", "summary": "Insert an element before or after another element in a list", "arguments": "key where pivot value", "since": "2.2.0"}, {"cmd": "LLEN", "summary": "Get the length of a list", "arguments": "key", "since": "1.0.0"}, {"cmd": "LPOP", "summary": "Remove and get the first element in a list", "arguments": "key", "since": "1.0.0"}, {"cmd": "LPUSH", "summary": "Prepend one or multiple values to a list", "arguments": "key value", "since": "1.0.0"}, {"cmd": "LPUSHX", "summary": "Prepend a value to a list, only if the list exists", "arguments": "key value", "since": "2.2.0"}, {"cmd": "LRANGE", "summary": "Get a range of elements from a list", "arguments": "key start stop", "since": "1.0.0"}, {"cmd": "LREM", "summary": "Remove elements from a list", "arguments": "key count value", "since": "1.0.0"}, {"cmd": "LSET", "summary": "Set the value of an element in a list by its index", "arguments": "key index value", "since": "1.0.0"}, {"cmd": "LTRIM", "summary": "Trim a list to the specified range", "arguments": "key start stop", "since": "1.0.0"}, {"cmd": "MEMORY DOCTOR", "summary": "Outputs memory problems report", "arguments": "", "since": "4.0.0"}, {"cmd": "MEMORY HELP", "summary": "Show helpful text about the different subcommands", "arguments": "", "since": "4.0.0"}, {"cmd": "MEMORY MALLOC-STATS", "summary": "Show allocator internal stats", "arguments": "", "since": "4.0.0"}, {"cmd": "MEMORY PURGE", "summary": "Ask the allocator to release memory", "arguments": "", "since": "4.0.0"}, {"cmd": "MEMORY STATS", "summary": "Show memory usage details", "arguments": "", "since": "4.0.0"}, {"cmd": "MEMORY USAGE", "summary": "Estimate the memory usage of a key", "arguments": "key [SAMPLES]", "since": "4.0.0"}, {"cmd": "MGET", "summary": "Get the values of all the given keys", "arguments": "key", "since": "1.0.0"}, {"cmd": "MIGRATE", "summary": "Atomically transfer a key from a Redis instance to another one.", "arguments": "host port key destination-db timeout [copy] [replace] [KEYS]", "since": "2.6.0"}, {"cmd": "MONITOR", "summary": "Listen for all requests received by the server in real time", "arguments": "", "since": "1.0.0"}, {"cmd": "MOVE", "summary": "Move a key to another database", "arguments": "key db", "since": "1.0.0"}, {"cmd": "MSET", "summary": "Set multiple keys to multiple values", "arguments": "key value", "since": "1.0.1"}, {"cmd": "MSETNX", "summary": "Set multiple keys to multiple values, only if none of the keys exist", "arguments": "key value", "since": "1.0.1"}, {"cmd": "MULTI", "summary": "Mark the start of a transaction block", "arguments": "", "since": "1.2.0"}, {"cmd": "OBJECT", "summary": "Inspect the internals of Redis objects", "arguments": "subcommand [arguments]", "since": "2.2.3"}, {"cmd": "PERSIST", "summary": "Remove the expiration from a key", "arguments": "key", "since": "2.2.0"}, {"cmd": "PEXPIRE", "summary": "Set a key's time to live in milliseconds", "arguments": "key milliseconds", "since": "2.6.0"}, {"cmd": "PEXPIREAT", "summary": "Set the expiration for a key as a UNIX timestamp specified in milliseconds", "arguments": "key milliseconds-timestamp", "since": "2.6.0"}, {"cmd": "PFADD", "summary": "Adds the specified elements to the specified HyperLogLog.", "arguments": "key element", "since": "2.8.9"}, {"cmd": "PFCOUNT", "summary": "Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).", "arguments": "key", "since": "2.8.9"}, {"cmd": "PFMERGE", "summary": "Merge N different HyperLogLogs into a single one.", "arguments": "destkey sourcekey", "since": "2.8.9"}, {"cmd": "PING", "summary": "Ping the server", "arguments": "[message]", "since": "1.0.0"}, {"cmd": "PSETEX", "summary": "Set the value and expiration in milliseconds of a key", "arguments": "key milliseconds value", "since": "2.6.0"}, {"cmd": "PSUBSCRIBE", "summary": "Listen for messages published to channels matching the given patterns", "arguments": "pattern", "since": "2.0.0"}, {"cmd": "PUBSUB", "summary": "Inspect the state of the Pub/Sub subsystem", "arguments": "subcommand [argument]", "since": "2.8.0"}, {"cmd": "PTTL", "summary": "Get the time to live for a key in milliseconds", "arguments": "key", "since": "2.6.0"}, {"cmd": "PUBLISH", "summary": "Post a message to a channel", "arguments": "channel message", "since": "2.0.0"}, {"cmd": "PUNSUBSCRIBE", "summary": "Stop listening for messages posted to channels matching the given patterns", "arguments": "[pattern]", "since": "2.0.0"}, {"cmd": "QUIT", "summary": "Close the connection", "arguments": "", "since": "1.0.0"}, {"cmd": "RANDOMKEY", "summary": "Return a random key from the keyspace", "arguments": "", "since": "1.0.0"}, {"cmd": "READONLY", "summary": "Enables read queries for a connection to a cluster slave node", "arguments": "", "since": "3.0.0"}, {"cmd": "READWRITE", "summary": "Disables read queries for a connection to a cluster slave node", "arguments": "", "since": "3.0.0"}, {"cmd": "RENAME", "summary": "Rename a key", "arguments": "key newkey", "since": "1.0.0"}, {"cmd": "RENAMENX", "summary": "Rename a key, only if the new key does not exist", "arguments": "key newkey", "since": "1.0.0"}, {"cmd": "RESTORE", "summary": "Create a key using the provided serialized value, previously obtained using DUMP.", "arguments": "key ttl serialized-value [replace]", "since": "2.6.0"}, {"cmd": "ROLE", "summary": "Return the role of the instance in the context of replication", "arguments": "", "since": "2.8.12"}, {"cmd": "RPOP", "summary": "Remove and get the last element in a list", "arguments": "key", "since": "1.0.0"}, {"cmd": "RPOPLPUSH", "summary": "Remove the last element in a list, prepend it to another list and return it", "arguments": "source destination", "since": "1.2.0"}, {"cmd": "RPUSH", "summary": "Append one or multiple values to a list", "arguments": "key value", "since": "1.0.0"}, {"cmd": "RPUSHX", "summary": "Append a value to a list, only if the list exists", "arguments": "key value", "since": "2.2.0"}, {"cmd": "SADD", "summary": "Add one or more members to a set", "arguments": "key member", "since": "1.0.0"}, {"cmd": "SAVE", "summary": "Synchronously save the dataset to disk", "arguments": "", "since": "1.0.0"}, {"cmd": "SCARD", "summary": "Get the number of members in a set", "arguments": "key", "since": "1.0.0"}, {"cmd": "SCRIPT DEBUG", "summary": "Set the debug mode for executed scripts.", "arguments": "mode", "since": "3.2.0"}, {"cmd": "SCRIPT EXISTS", "summary": "Check existence of scripts in the script cache.", "arguments": "sha1", "since": "2.6.0"}, {"cmd": "SCRIPT FLUSH", "summary": "Remove all the scripts from the script cache.", "arguments": "", "since": "2.6.0"}, {"cmd": "SCRIPT KILL", "summary": "Kill the script currently in execution.", "arguments": "", "since": "2.6.0"}, {"cmd": "SCRIPT LOAD", "summary": "Load the specified Lua script into the script cache.", "arguments": "script", "since": "2.6.0"}, {"cmd": "SDIFF", "summary": "Subtract multiple sets", "arguments": "key", "since": "1.0.0"}, {"cmd": "SDIFFSTORE", "summary": "Subtract multiple sets and store the resulting set in a key", "arguments": "destination key", "since": "1.0.0"}, {"cmd": "SELECT", "summary": "Change the selected database for the current connection", "arguments": "index", "since": "1.0.0"}, {"cmd": "SET", "summary": "Set the string value of a key", "arguments": "key value [expiration] [condition]", "since": "1.0.0"}, {"cmd": "SETBIT", "summary": "Sets or clears the bit at offset in the string value stored at key", "arguments": "key offset value", "since": "2.2.0"}, {"cmd": "SETEX", "summary": "Set the value and expiration of a key", "arguments": "key seconds value", "since": "2.0.0"}, {"cmd": "SETNX", "summary": "Set the value of a key, only if the key does not exist", "arguments": "key value", "since": "1.0.0"}, {"cmd": "SETRANGE", "summary": "Overwrite part of a string at key starting at the specified offset", "arguments": "key offset value", "since": "2.2.0"}, {"cmd": "SHUTDOWN", "summary": "Synchronously save the dataset to disk and then shut down the server", "arguments": "[save-mode]", "since": "1.0.0"}, {"cmd": "SINTER", "summary": "Intersect multiple sets", "arguments": "key", "since": "1.0.0"}, {"cmd": "SINTERSTORE", "summary": "Intersect multiple sets and store the resulting set in a key", "arguments": "destination key", "since": "1.0.0"}, {"cmd": "SISMEMBER", "summary": "Determine if a given value is a member of a set", "arguments": "key member", "since": "1.0.0"}, {"cmd": "SLAVEOF", "summary": "Make the server a slave of another instance, or promote it as master", "arguments": "host port", "since": "1.0.0"}, {"cmd": "SLOWLOG", "summary": "Manages the Redis slow queries log", "arguments": "subcommand [argument]", "since": "2.2.12"}, {"cmd": "SMEMBERS", "summary": "Get all the members in a set", "arguments": "key", "since": "1.0.0"}, {"cmd": "SMOVE", "summary": "Move a member from one set to another", "arguments": "source destination member", "since": "1.0.0"}, {"cmd": "SORT", "summary": "Sort the elements in a list, set or sorted set", "arguments": "key [BY] [LIMIT] [GET] [order] [sorting] [STORE]", "since": "1.0.0"}, {"cmd": "SPOP", "summary": "Remove and return one or multiple random members from a set", "arguments": "key [count]", "since": "1.0.0"}, {"cmd": "SRANDMEMBER", "summary": "Get one or multiple random members from a set", "arguments": "key [count]", "since": "1.0.0"}, {"cmd": "SREM", "summary": "Remove one or more members from a set", "arguments": "key member", "since": "1.0.0"}, {"cmd": "STRLEN", "summary": "Get the length of the value stored in a key", "arguments": "key", "since": "2.2.0"}, {"cmd": "SUBSCRIBE", "summary": "Listen for messages published to the given channels", "arguments": "channel", "since": "2.0.0"}, {"cmd": "SUNION", "summary": "Add multiple sets", "arguments": "key", "since": "1.0.0"}, {"cmd": "SUNIONSTORE", "summary": "Add multiple sets and store the resulting set in a key", "arguments": "destination key", "since": "1.0.0"}, {"cmd": "SWAPDB", "summary": "Swaps two Redis databases", "arguments": "index index", "since": "4.0.0"}, {"cmd": "SYNC", "summary": "Internal command used for replication", "arguments": "", "since": "1.0.0"}, {"cmd": "TIME", "summary": "Return the current server time", "arguments": "", "since": "2.6.0"}, {"cmd": "TOUCH", "summary": "Alters the last access time of a key(s). Returns the number of existing keys specified.", "arguments": "key", "since": "3.2.1"}, {"cmd": "TTL", "summary": "Get the time to live for a key", "arguments": "key", "since": "1.0.0"}, {"cmd": "TYPE", "summary": "Determine the type stored at key", "arguments": "key", "since": "1.0.0"}, {"cmd": "UNSUBSCRIBE", "summary": "Stop listening for messages posted to the given channels", "arguments": "[channel]", "since": "2.0.0"}, {"cmd": "UNLINK", "summary": "Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.", "arguments": "key", "since": "4.0.0"}, {"cmd": "UNWATCH", "summary": "Forget about all watched keys", "arguments": "", "since": "2.2.0"}, {"cmd": "WAIT", "summary": "Wait for the synchronous replication of all the write commands sent in the context of the current connection", "arguments": "numslaves timeout", "since": "3.0.0"}, {"cmd": "WATCH", "summary": "Watch the given keys to determine execution of the MULTI/EXEC block", "arguments": "key", "since": "2.2.0"}, {"cmd": "ZADD", "summary": "Add one or more members to a sorted set, or update its score if it already exists", "arguments": "key [condition] [change] [increment] score member", "since": "1.2.0"}, {"cmd": "ZCARD", "summary": "Get the number of members in a sorted set", "arguments": "key", "since": "1.2.0"}, {"cmd": "ZCOUNT", "summary": "Count the members in a sorted set with scores within the given values", "arguments": "key min max", "since": "2.0.0"}, {"cmd": "ZINCRBY", "summary": "Increment the score of a member in a sorted set", "arguments": "key increment member", "since": "1.2.0"}, {"cmd": "ZINTERSTORE", "summary": "Intersect multiple sorted sets and store the resulting sorted set in a new key", "arguments": "destination numkeys key [WEIGHTS] [AGGREGATE]", "since": "2.0.0"}, {"cmd": "ZLEXCOUNT", "summary": "Count the number of members in a sorted set between a given lexicographical range", "arguments": "key min max", "since": "2.8.9"}, {"cmd": "ZPOPMAX", "summary": "Remove and return members with the highest scores in a sorted set", "arguments": "key [count]", "since": "5.0.0"}, {"cmd": "ZPOPMIN", "summary": "Remove and return members with the lowest scores in a sorted set", "arguments": "key [count]", "since": "5.0.0"}, {"cmd": "ZRANGE", "summary": "Return a range of members in a sorted set, by index", "arguments": "key start stop [withscores]", "since": "1.2.0"}, {"cmd": "ZRANGEBYLEX", "summary": "Return a range of members in a sorted set, by lexicographical range", "arguments": "key min max [LIMIT]", "since": "2.8.9"}, {"cmd": "ZREVRANGEBYLEX", "summary": "Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.", "arguments": "key max min [LIMIT]", "since": "2.8.9"}, {"cmd": "ZRANGEBYSCORE", "summary": "Return a range of members in a sorted set, by score", "arguments": "key min max [withscores] [LIMIT]", "since": "1.0.5"}, {"cmd": "ZRANK", "summary": "Determine the index of a member in a sorted set", "arguments": "key member", "since": "2.0.0"}, {"cmd": "ZREM", "summary": "Remove one or more members from a sorted set", "arguments": "key member", "since": "1.2.0"}, {"cmd": "ZREMRANGEBYLEX", "summary": "Remove all members in a sorted set between the given lexicographical range", "arguments": "key min max", "since": "2.8.9"}, {"cmd": "ZREMRANGEBYRANK", "summary": "Remove all members in a sorted set within the given indexes", "arguments": "key start stop", "since": "2.0.0"}, {"cmd": "ZREMRANGEBYSCORE", "summary": "Remove all members in a sorted set within the given scores", "arguments": "key min max", "since": "1.2.0"}, {"cmd": "ZREVRANGE", "summary": "Return a range of members in a sorted set, by index, with scores ordered from high to low", "arguments": "key start stop [withscores]", "since": "1.2.0"}, {"cmd": "ZREVRANGEBYSCORE", "summary": "Return a range of members in a sorted set, by score, with scores ordered from high to low", "arguments": "key max min [withscores] [LIMIT]", "since": "2.2.0"}, {"cmd": "ZREVRANK", "summary": "Determine the index of a member in a sorted set, with scores ordered from high to low", "arguments": "key member", "since": "2.0.0"}, {"cmd": "ZSCORE", "summary": "Get the score associated with the given member in a sorted set", "arguments": "key member", "since": "1.2.0"}, {"cmd": "ZUNIONSTORE", "summary": "Add multiple sorted sets and store the resulting sorted set in a new key", "arguments": "destination numkeys key [WEIGHTS] [AGGREGATE]", "since": "2.0.0"}, {"cmd": "SCAN", "summary": "Incrementally iterate the keys space", "arguments": "cursor [MATCH] [COUNT]", "since": "2.8.0"}, {"cmd": "SSCAN", "summary": "Incrementally iterate Set elements", "arguments": "key cursor [MATCH] [COUNT]", "since": "2.8.0"}, {"cmd": "HSCAN", "summary": "Incrementally iterate hash fields and associated values", "arguments": "key cursor [MATCH] [COUNT]", "since": "2.8.0"}, {"cmd": "ZSCAN", "summary": "Incrementally iterate sorted sets elements and associated scores", "arguments": "key cursor [MATCH] [COUNT]", "since": "2.8.0"}, {"cmd": "XADD", "summary": "Appends a new entry to a stream", "arguments": "key ID field string", "since": "5.0.0"}, {"cmd": "XRANGE", "summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval", "arguments": "key start end [COUNT]", "since": "5.0.0"}, {"cmd": "XREVRANGE", "summary": "Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE", "arguments": "key end start [COUNT]", "since": "5.0.0"}, {"cmd": "XLEN", "summary": "Return the number of entires in a stream", "arguments": "key", "since": "5.0.0"}, {"cmd": "XREAD", "summary": "Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.", "arguments": "[COUNT] [BLOCK] streams key ID", "since": "5.0.0"}, {"cmd": "XREADGROUP", "summary": "Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.", "arguments": "GROUP [COUNT] [BLOCK] streams key ID", "since": "5.0.0"}, {"cmd": "XPENDING", "summary": "Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.", "arguments": "key group [start end count] [consumer]", "since": "5.0.0"}]